# list1 = []
# list2 = list()
# list3 = [1, 2, 3, 45, 5, 6, 7]
# print(f"list1 type = {type(list1)} \nlist1 = {list1} \nlist2 type = {type(list2)} \nlist2 = {list2}")
# print(f"list3 type = {type(list3)} \nlist3 = {list3}")
# —Å–ø–∏—Å–∫–∏






# newList = [1, 2]
# print(newList)
# newList.append(26)
# print(newList)
# –ø—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞






# newList2 = []
# print(newList2)
# for i in range(5):
#     newList2.append(i)
#     print(newList2)
# –ø—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é —Ü–∏–∫–ª–∞







'''
list_1 = [12, 7, -1, 21, 0]
print(list_1.pop()) # 0
print(list_1) # [12, 7, -1, 21]
print(list_1.pop()) # 21
print(list_1) # [12, 7, -1]
print(list_1.pop()) # -1
print(list_1) # [12, 7]
print(list_1.pop(1)) # —É–¥–∞–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É. –ò–Ω–¥–µ–∫—Å 7-–∫–∏= 1
print(list_1)
'''
# –ø—Ä–∏–º–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É.









# testList = [12, 7, -1, 21, 0]
# print(testList)
# testList.insert(2, 11)
# # 1-e –∑–Ω–∞—á–µ–Ω–∏–µ –≤ insert —ç—Ç–æ –∏–Ω–¥–µ–∫—Å
# # –≤ –∫–æ—Ç–æ—Ä—ã–π –º—ã —Ö–æ—Ç–∏–º –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç. –ê 2-–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ
# # —Å–∞–º —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π –º—ã –¥–æ–±–∞–≤–ª—è–µ–º
# print(testList) # [12, 7, 11, -1, 21, 0]
# # –ø—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ –∏–Ω–¥–µ–∫—Å—É.







'''
newListTest = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(newListTest[0]) # 1
print(newListTest[1]) # 2
print(newListTest[len(newListTest) - 1]) # 10
print(newListTest[-5]) # 6
print(newListTest[:]) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(newListTest[:2]) # [1, 2]
print(newListTest[len(newListTest) - 2:]) #[9, 10]
print(newListTest[2:9]) # [3, 4, 5, 6, 7, 8, 9]
print(newListTest[6:-18]) # []
print(newListTest[0:len(newListTest):6]) # [1, 7]
print(newListTest[::6]) # [1, 7]
# –ø—Ä–∏–º–µ—Ä —Å—Ä–µ–∑–∞ —Å–ø–∏—Å–∫–æ–≤
'''








# t = ()
# print(type(t))
# t = (1, 2)
# print(type(t))

# v = [1, 8, 9]
# # print(v)
# # print(type(v))
# v = tuple(v)
# # –æ–±–æ–∑–Ω–∞—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é v –∫–∞–∫ –∫–æ—Ä—Ç–µ–∂, –¥–æ —ç—Ç–æ–≥–æ –Ω–∞—à–∞ –ø–µ—Ä–µ–º–Ω–Ω–∞—è –±—ã–ª–∞ —Å–ø–∏—Å–∫–æ–º
# print(type(v))
# # –∫–æ—Ä—Ç–µ–∂–µ–π –∏ –∏—Ö –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è

# a, b, c = v # –ø—Ä–∏–º–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
# print(type(a))
# print(a, b, c) # –∫–∞–∂–¥–æ–π –ø–µ—Ä–µ–º–Ω–Ω–æ–π –º—ã –Ω–∞–∑—á–∞–µ–º –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ v
# # –ø—Ä–∏—á–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è a, –æ—Å—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∫–ª–∞—Å—Å–∞ int

# t2 = (1, 2, 3, 5)
# print(t2[3]) # –∫–∞–∫ –∏ –≤ —Å–ø–∏—Å–∫–∞—Ö –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
# for i in t2:
#     print(i) # —Ç–æ–∂–µ —Å–∞–º–æ–µ –∫–∞—Å–∞–µ—Ç—Å—è –∏ —Ü–∏–∫–ª–æ–≤

# for j in range(len(t2)):
#     print(t2[j]) # –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

# t2[0] = 2
# –≤ –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–µ–¥–µ—Ç—Å—è –æ—à–∏–±–∫–∞, –ø–æ—Ç–æ–º—É—á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ—Ä—Ç–µ–∂–µ –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å
# –Ω–æ –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –±—ã —Å–ø–∏—Å–∫–æ, —Ç–æ –≤—Å–µ –±—ã —Ä–∞–±–æ—Ç–∞–ª–æ






# d = {} # —Ä–∞–±–æ—Ç–∞ —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏
# d = dict() # —Å–ª–æ–≤–∞—Ä—å –º–æ–∂–Ω–æ –æ–±–æ–∑–Ω–∞—á–∏—Ç—å –∫–∞–∫ {} –∏–ª–∏ –∑–∞–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä dict()
#
# d['q'] = 'qwerty' # q –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è –∫–ª—é—á–æ–º, –∞ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞
# # —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∫–∞ qwerty
# d['w'] = 'windows' # w –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è –∫–ª—é—á–æ–º, –∞ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞
# # —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∫–∞ windows
# print(d) # {'q': 'qwerty', 'w': 'windows'} - –Ω–∞—à –≤—ã–≤–æ–¥
# # —Å–Ω–∞—á–∞–ª–∞ –∏–¥–µ—Ç –∫–ª—é—á –∞ –∑–∞—Ç–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –∫–ª—é—á
# print(d['q']) # –≤—ã–≤–æ–¥–æ–º –±—É–¥–µ—Ç qwerty

# dictionary = {}
# dictionary ={'up': '‚Üë', 'left': '‚Üê', 'down': '‚Üì', 'right': '‚Üí'}
# print(dictionary) # {'up':'‚Üë', 'left':'‚Üê', 'down':'‚Üì', 'right':'‚Üí'}
# print(dictionary['left']) # ‚Üê
# # —Ç–∏–ø—ã –∫–ª—é—á–µ–π –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
# print(dictionary['up']) # ‚Üë
# # —Ç–∏–ø—ã –∫–ª—é—á–µ–π –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
# dictionary['left'] = '‚áê'
# print(dictionary['left']) # ‚áê
# print(dictionary['type']) # KeyError: 'type'
# del dictionary['left'] # —É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
# for item in dictionary: # for (k,v) in dictionary.items():
#     print('{}: {}'.format(item, dictionary[item]))
# # up: ‚Üë
# # down: ‚Üì
# # right: ‚Üí
# # –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å–æ—Å —Å–ª–æ–≤–∞—Ä—è–º–∏





# –ú–Ω–æ–∂–µ—Å—Ç–≤–∞
# –ú–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤ —Å–µ–±–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
# —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ.
# –û–¥–Ω–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ª—é–±—ã—Ö —Ç–∏–ø–æ–≤. –ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –¥–≤–∞
# –º–Ω–æ–∂–µ—Å—Ç–≤–∞, –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –Ω–∞–¥ –Ω–∏–º–∏ –ª—é–±—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏,
# –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ, –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∏ —Ä–∞–∑–Ω–æ—Å—Ç—å. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –∏—Ö.
# colors = {'red', 'green', 'blue'}
# print(colors) # {'red', 'green', 'blue'}
# colors.add('red')
# print(colors) # {'red', 'green', 'blue'}
# colors.add('gray')
# print(colors) # {'red', 'green', 'blue','gray'}
# colors.remove('red')
# print(colors) # {'green', 'blue','gray'}
# colors.remove('red') # KeyError: 'red'
# colors.discard('red') # ok
# print(colors) # {'green', 'blue','gray'}
# colors.clear() # { }
# print(colors) # set()



# –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏ –≤ Python
# a = {1, 2, 3, 5, 8}
# b = {2, 5, 8, 13, 21}
# c = a.copy() # c = {1, 2, 3, 5, 8}
# u = a.union(b) # u = {1, 2, 3, 5, 8, 13,
# i = a.intersection(b) # i = {8, 2, 5}
# dl = a.difference(b) # dl = {1, 3}
# dr = b.difference(a) # dr = {13, 21}
# q=a.union(b).difference(a.intersection(b)) # {1, 21, 3, 13}




# –ù–µ–∏–∑–º–µ–Ω—è–µ–º–æ–µ –∏–ª–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ(frozenset) ‚Äî –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —Å –∫–æ—Ç–æ—Ä—ã–º
# –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ—Ç–æ–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
# a = {1, 2, 3, 5, 8}
# b = frozenset(a)
# print(b) # frozenset({1, 2, 3, 5, 8})




# 1. –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 100
# list_1 = []
# for i in range(1, 101):
#     list_1.append(i)
# print(list_1) # [1, 2, 3,..., 100]
# # –≠—Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫:
# list_1 = [i for i in range(1, 101)] # [1, 2, 3,..., 100]
# print(list_1)

# 2. –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ (—Ç–æ–ª—å–∫–æ —á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞)
# list_1 = []
# for i in range(1, 101):
#     if i % 2 == 0:
#         list_1.append(i)
# print(list_1)
# # –≠—Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫:
# list_1 = [i for i in range(1, 101) if i % 2 == 0] # [2, 4, 6,..., 100]
# print(list_1)

# –î–æ–ø—É—Å—Ç–∏–º, –≤—ã —Ä–µ—à–∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—ã –∫–∞–∂–¥–æ–º—É –∏–∑ —á–∏—Å–µ–ª (–∫–æ—Ä—Ç–µ–∂–∏)
# list_1 = []
# for i in range(1, 101):
#     if i % 2 == 0:
#         list_1.append((i, i))
# print(list_1)
# # –≠—Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫:
# list_1 = [(i, i) for i in range(1, 101) if i % 2 == 0] # [(2, 2), (4, 4),...,
# # (100, 100)]
# print(list_1)

# –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —É–º–Ω–æ–∂–∞—Ç—å, –¥–µ–ª–∏—Ç—å, –ø—Ä–∏–±–∞–≤–ª—è—Ç—å, –≤—ã—á–∏—Ç–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä, —É–º–Ω–æ–∂–∏—Ç—å
# –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ 2.
# list_1 = []
# for i in range(10):
#     if i % 2 == 0:
#         list_1.append(i * 2)
# print(list_1)
# # –≠—Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫:
# list_1 = [i * 2 for i in range(10) if i % 2 == 0]
# print(list_1) # [0, 4, 8, 12, 16]




# –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞
# –ú—ã —Å –≤–∞–º–∏ –ª—é–¥–∏, –∞ –ª—é–¥—è–º —Å—É–∂–¥–µ–Ω–æ –æ—à–∏–±–∞—Ç—å—Å—è, –¥–∞–∂–µ –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ
# –∫–æ–¥–∞ üôÇ
# –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º —Å –í–∞–º–∏ —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–¥–∞ –Ω–∞ Python.
# üî• –°–∞–º—ã–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:


# # ‚óè SyntaxError(–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞)
#
# number_first = 5
# number_second = 7
# if number_first > number_second: # !!!!!
#     print(number_first)
#
# # # –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ :
#

# # ‚óè IndentationError(–û—à–∏–±–∫–∞ –æ—Ç—Å—Ç—É–ø–æ–≤)

# number_first = 5
# number_second = 7
# if number_first > number_second:
# print(number_first) # !!!!!
#
# # IndentationError:
# # expected an indented block after 'if' statement on line 270
# # –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç—Å—Ç—É–ø–æ–≤


# # ‚óè TypeError(–¢–∏–ø–æ–≤–∞—è –æ—à–∏–±–∫–∞)
#
# text = 'Python'
# number = 5
# print(text + number)
#
# # TypeError: can only concatenate str (not "int") to str
# # –ù–µ–ª—å–∑—è —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –∏ —á–∏—Å–ª–∞


# # ‚óè ZeroDivisionError(–î–µ–ª–µ–Ω–∏–µ –Ω–∞ 0)
#
# number_first = 5
# number_second = 0
# print(number_first // number_second)
#
# # ZeroDivisionError: integer division or modulo by zero
# # –î–µ–ª–∏—Ç—å –Ω–∞ 0 –Ω–µ–ª—å–∑—è


# # ‚óè KeyError(–û—à–∏–±–∫–∞ –∫–ª—é—á–∞)
#
# dictionary = {1: 'Monday', 2: 'Tuesday'}
# print(dictionary[3])
#
# # line 299, in <module>
# #     print(dictionary[3])
# # KeyError: 3
# # –¢–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç


# # ‚óè NameError(–û—à–∏–±–∫–∞ –∏–º–µ–Ω–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π)
#
# name = 'Ivan'
# print(names)
#
# # line 315, in <module>
# #     print(names)
# # NameError: name 'names' is not defined. Did you mean: 'name'?
# –ü–µ—Ä–µ–º–µ–Ω–Ω–æ–π names –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç


# # ‚óè ValueError(–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è)
#
# text = 'Python'
# print(int(text))
#
# # line 326, in <module>
# #     print(int(text))
# # ValueError: invalid literal for int() with base 10: 'Python'
# # –ù–µ–ª—å–∑—è —Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Ü–µ–ª—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è


# –ò—Ç–æ–≥–∏:
# 1. –ú—ã –∏–∑—É—á–∏–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:
# ‚óè —Å–ø–∏—Å–∫–∏
# ‚óè –∫–æ—Ä—Ç–µ–∂–∏
# ‚óè —Å–ª–æ–≤–∞—Ä–∏
# ‚óè –º–Ω–æ–∂–µ—Å—Ç–≤–∞
# 2. List Comprehension
# 3. –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞
