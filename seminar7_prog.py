import math


#lambda, filter, map, zip, enumerate, list comprehension
#list comprehension
# a = [i if i%2==0 else 0 for i in range(1,9) ]
# print(a)

#enumerate
# a = [0, 2, 0, 4, 0, 6, 0, 8]
# for a,r in enumerate(a):
#     print(a, r)

#lambda
# def summa(a,b):
#     return a+b

# summa = lambda a,b:a+b
# print(summa(3,4))

#map
# a = [(12,2), (3,5), (45, 6)]
# a = list(map(lambda x: x[0]+x[1], a))
# print(a)

#filter
# a = [12, 3,45, 6]
# a = list(filter(lambda x: True if x*2>20 else False ,a))
# print(a)

#zip
# a = [1,2,3,4]
# b = "abcdef"
# d = dict(zip(a,b))
# print(d)

#41)Напишите программу на Python для поиска пересечения двух
# заданных массивов с помощью Lambda, filter.
# a1 = [1, 2, 3, 5, 7, 8, 9, 10]
# a2 = [1, 2, 4, 8, 9]
#2)Имеется упорядоченный список:
# A = [[1, 2, 3],
#      [4, 5, 6],
#      [7, 8, 9]]
# #
# # Перебрать все элементы этого списка с помощью функций enumerate и элементы, стоящие на главной диагонали (имеющие равные индексы со списком и индексом элемента внутри списка), превратить в нули.
#
# 43)Имеется список id сотрудников из 10 элементов, каждый id - случайное число от 1 до 100 (сделать с помощью list_comprehension)
# Имеется список имен сотрудников из 10 элементов (вручную)
#
# Сопоставьте каждому имени сотрудника его id по порядку, и выведите получившийся список кортежей.
# Отсортировать список по возрастанию id.
#
# Выведете имена сотрудников, получившие нечетное id.

# Отсортируйте список чисел по возрастанию средней цифры элементов списка
# nums = [197, 572, 234, 568, 654]
# sorted_nums = [234, 654, 568, 572, 197]


# Задача №47. Решение в группах
# У вас есть код, который вы не можете менять (так часто бывает,
# когда код в глубине
# программы используется множество раз и вы не хотите ничего сломать):
# transformation = <???>
# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # или любой другой список
# transormed_values = list(map(transformation, values))
# Единственный способ вашего взаимодействия с этим кодом - посредством задания
# функции transformation.
# Однако вы поняли, что для вашей текущей задачи вам не
# нужно никак преобразовывать
# список значений, а нужно получить его как есть.
# Напишите такое лямбда-выражение transformation, чтобы
# transformed_values получился
# копией values.
# Пример ввода и вывода данных представлены на следующем
# слайде

# transformation = lambda x: x
# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
# transormed_values = list(map(transformation, values))
# print(transormed_values)
# if transormed_values == values:
#     print("yes")
# else:
#     print("no")

# Задача №49. Решение в группах
# Планеты вращаются вокруг звезд по эллиптическим орбитам.
# Назовем самой далекой планетой ту, орбита которой имеет
# самую большую площадь. Напишите функцию
# find_farthest_orbit(list_of_orbits), которая среди списка орбит
# планет найдет ту, по которой вращается самая далекая
# планета. Круговые орбиты не учитывайте: вы знаете, что у
# вашей звезды таких планет нет, зато искусственные спутники
# были были запущены на круговые орбиты. Результатом
# функции должен быть кортеж, содержащий длины полуосей
# эллипса орбиты самой далекой планеты. Каждая орбита
# представляет из себя кортеж из пары чисел - полуосей ее
# эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b,
# где a и b - длины полуосей эллипса. При решении задачи
# используйте списочные выражения. Подсказка: проще всего
# будет найти эллипс в два шага: сначала вычислить самую
# большую площадь эллипса, а затем найти и сам эллипс,
# имеющий такую площадь. Гарантируется, что самая далекая
# планета ровно одна
# Пример ввода и вывода данных представлены на
# следующем слайде
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# def find_farthest_orbit(orbits):
#     index = 0
#     max_orbits = 0
#     for i in range(len(orbits)):
#         if math.pi * orbits[i][0] * orbits[i][1] > max_orbits and orbits[i][0] != orbits[i][1]:
#             index = orbits[i]
#             max_orbits = math.pi * orbits[i][0] * orbits[i][1]
#     return index
# print(find_farthest_orbit(orbits))



# Задача №51. Решение в группах
# Напишите функцию same_by(characteristic, objects), которая
# проверяет, все ли объекты имеют одинаковое значение
# некоторой характеристики, и возвращают True, если это так.
# Если значение характеристики для разных объектов
# отличается - то False. Для пустого набора объектов, функция
# должна возвращать True. Аргумент characteristic - это
# функция, которая принимает объект и вычисляет его
# характеристику.
# Ввод: Вывод:

# values = [0, 2, 10, 6]
# def same_by(characteristic, objects):
#     flag = True
#     for i in range(len(objects)):
#         if objects[i] % 2 != 0:
#             flag = False
#             return flag
#     return flag
#
# if same_by(lambda x: x % 2, values) == True:
#     print('same')
# else:
#     print('different')

#41)Напишите программу на Python для поиска пересечения двух
# заданных массивов с помощью Lambda, filter.
# a1 = [1, 2, 3, 5, 7, 8, 9, 10]
# a2 = [1, 2, 4, 8, 9]
# a = list(filter(lambda x: x in a1, a2))
# print(a)


#2)Имеется упорядоченный список:
# A = [[1, 2, 3],
#      [4, 5, 6],
#      [7, 8, 9]]
# #
# # Перебрать все элементы этого списка с помощью функций enumerate и элементы,
# стоящие на главной диагонали (имеющие равные индексы со списком и индексом элемента внутри списка),
# превратить в нули.
# A = [[1, 2, 3],
#      [4, 5, 6],
#      [7, 8, 9]]